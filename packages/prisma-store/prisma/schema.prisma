generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DeploymentStatus {
  NOT_STARTED
  QUEUED
  IN_PROGRESS
  READY
  FAIL
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  username      String?   @unique
  password      String?   // Make password optional for OAuth users

  resetToken    String? 
  resetTokenExp DateTime?

  accounts Account[]
  sessions Session[]
  projects Project[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Project {
  id          String  @id @default(cuid())
  name        String
  gitUrl      String  @map("git_url")
  description String?

  deployment Deployment[]
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String       @map("user_id")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("projects")
}

model Deployment {
  id        String @id @default(cuid())
  projectId String @map("project_id")

  project Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  status  DeploymentStatus @default(NOT_STARTED)

  logs     Log[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("deployments")
}

model Log {
  id           String   @id @default(cuid())
  deploymentId String   @map("deployment_id")
  log          String
  timestamp    DateTime @default(now())

  deployment Deployment @relation(fields: [deploymentId], references: [id], onDelete: Cascade)

  @@index([deploymentId])
  @@map("logs")
}
