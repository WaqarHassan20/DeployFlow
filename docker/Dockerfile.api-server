FROM oven/bun:alpine AS baseimage

# Stage 1: Install ALL dependencies (needed for build)
FROM baseimage AS deps
WORKDIR /home/app
COPY package.json bun.lock turbo.json ./
COPY apps/api-server/package.json ./apps/api-server/
COPY packages/prisma-store/package.json ./packages/prisma-store/

RUN bun install

# Stage 2: Build stage
FROM baseimage AS builder
WORKDIR /home/app
RUN apk add --no-cache git libc6-compat

COPY --from=deps /home/app/node_modules ./node_modules
COPY --from=deps /home/app/package.json ./package.json
COPY --from=deps /home/app/turbo.json ./turbo.json
COPY --from=deps /home/app/bun.lock ./bun.lock

# Copy source code
COPY packages ./packages
COPY apps/api-server ./apps/api-server

RUN bunx prisma generate --schema=./packages/prisma-store/prisma/schema.prisma

# Build arguments for compilation (not secrets)
ARG BUILD_DATABASE_URL="postgresql://dummy:dummy@localhost:5432/dummy"

# Prepare for production (TypeScript compilation if needed)
RUN cd apps/api-server && bun run build || echo "No build script found, using source directly"

# Stage 3: Production Runtime (OPTIMIZED)
FROM oven/bun:alpine AS runner
WORKDIR /home/app

RUN apk add --no-cache git libc6-compat && \
    addgroup --system --gid 1001 deployflow && \
    adduser --system --uid 1001 --ingroup deployflow appUser

# Copy only necessary runtime files
COPY --from=builder --chown=appUser:deployflow /home/app/node_modules ./node_modules
COPY --from=builder --chown=appUser:deployflow /home/app/packages ./packages
COPY --from=builder --chown=appUser:deployflow /home/app/apps/api-server ./apps/api-server

USER appUser
EXPOSE 9000

CMD ["bun", "run", "apps/api-server/index.ts"]
