FROM oven/bun:alpine AS baseimage

# Stage 1: Install ALL dependencies (needed for build)
FROM baseimage AS deps
WORKDIR /home/app
COPY package.json bun.lock turbo.json ./
COPY apps/front-end/package.json ./apps/front-end/
COPY packages/prisma-store/package.json ./packages/prisma-store/

RUN bun install

# Stage 2: Build stage
FROM baseimage AS builder
WORKDIR /home/app
RUN apk add --no-cache git libc6-compat

COPY --from=deps /home/app/node_modules ./node_modules
COPY --from=deps /home/app/package.json ./package.json
COPY --from=deps /home/app/turbo.json ./turbo.json
COPY --from=deps /home/app/bun.lock ./bun.lock

# Copy source code
COPY packages ./packages
COPY apps/front-end ./apps/front-end

RUN bunx prisma generate --schema=./packages/prisma-store/prisma/schema.prisma

# Build arguments for compilation (not secrets)
ARG BUILD_DATABASE_URL="postgresql://dummy:dummy@localhost:5432/dummy"
ARG BUILD_NEXTAUTH_URL="https://localhost:3000"
ARG BUILD_NEXTAUTH_SECRET="dummy-auth-value-for-build"
ARG BUILD_GOOGLE_CLIENT_ID="dummy-google-client-id"
ARG BUILD_GOOGLE_CLIENT_SECRET="dummy-google-client-value"
ARG BUILD_GITHUB_CLIENT_ID="dummy-github-client-id"
ARG BUILD_GITHUB_CLIENT_SECRET="dummy-github-client-value"
ARG BUILD_RESEND_API_KEY="dummy-resend-value"
ARG BUILD_EMAIL_FROM="noreply@example.com"

# Set environment variables for build
ENV DATABASE_URL="$BUILD_DATABASE_URL"
ENV NEXTAUTH_URL="$BUILD_NEXTAUTH_URL"
ENV NEXTAUTH_SECRET="$BUILD_NEXTAUTH_SECRET"
ENV GOOGLE_CLIENT_ID="$BUILD_GOOGLE_CLIENT_ID"
ENV GOOGLE_CLIENT_SECRET="$BUILD_GOOGLE_CLIENT_SECRET"
ENV GITHUB_CLIENT_SECRET="$BUILD_GITHUB_CLIENT_SECRET"
ENV GITHUB_CLIENT_ID="$BUILD_GITHUB_CLIENT_ID"
ENV RESEND_API_KEY="$BUILD_RESEND_API_KEY"
ENV EMAIL_FROM="$BUILD_EMAIL_FROM"
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production

# Debug: Check environment and files before build
RUN echo "Current directory:" && pwd
RUN echo "Files in apps/front-end:" && ls -la apps/front-end/
RUN echo "Package.json contents:" && cat apps/front-end/package.json

# Build Next.js (change to directory first, then build)
WORKDIR /home/app/apps/front-end
RUN bun run build

# Debug: Check what was built
RUN ls -la .next/ || echo "No .next directory found"
RUN ls -la .next/standalone/ || echo "No standalone directory found"

# Return to main workdir
WORKDIR /home/app

# Stage 3: Production Runtime (OPTIMIZED)
FROM oven/bun:alpine AS runner
WORKDIR /home/app

RUN apk add --no-cache git libc6-compat && \
    addgroup --system --gid 1001 deployflow && \
    adduser --system --uid 1001 --ingroup deployflow appUser

# Copy necessary runtime files for Next.js
COPY --from=builder --chown=appUser:deployflow /home/app/node_modules ./node_modules
COPY --from=builder --chown=appUser:deployflow /home/app/packages ./packages
COPY --from=builder --chown=appUser:deployflow /home/app/apps/front-end ./apps/front-end

USER appUser
EXPOSE 3000

# Use bun to run the Next.js app instead of standalone
CMD ["bun", "run", "--cwd", "apps/front-end", "start"]
